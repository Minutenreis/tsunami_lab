##
# @author Alexander Breuer (alex.breuer AT uni-jena.de)
#
# @section DESCRIPTION
# Collects sources for a build.
##
Import('env')

# gather sources
l_sources = [ 'solvers/roe/Roe.cpp',
              'solvers/fWave/FWave.cpp',
              'patches/wavePropagation1d/WavePropagation1d.cpp',
              'patches/wavePropagation2d/WavePropagation2d.cpp',
              'setups/shockShock1d/ShockShock1d.cpp',
              'setups/damBreak1d/DamBreak1d.cpp',
              'setups/rareRare1d/RareRare1d.cpp',
              'setups/custom1d/Custom1d.cpp',
              'setups/subcritical1d/Subcritical1d.cpp',
              'setups/supercritical1d/Supercritical1d.cpp',
              'setups/tsunamiEvent1d/TsunamiEvent1d.cpp',
              'setups/artificialTsunami2d/ArtificialTsunami2d.cpp',
              'setups/tsunamiEvent2d/TsunamiEvent2d.cpp',
              'setups/damBreak2d/DamBreak2d.cpp',
              'io/csv/Csv.cpp',
              'io/stations/Stations.cpp',
              'io/netCdf/NetCdf.cpp',]

for l_so in l_sources:
  env.sources.append( env.Object( l_so ) )

env.standalone = env.Object( "main.cpp" )

# gather unit tests
l_tests = [ 'tests.cpp',
            'solvers/roe/Roe.test.cpp',
            'solvers/fWave/FWave.test.cpp',
            'patches/wavePropagation1d/WavePropagation1d.test.cpp',
            'patches/wavePropagation2d/WavePropagation2d.test.cpp',
            'setups/shockShock1d/ShockShock1d.test.cpp',
            'setups/damBreak1d/DamBreak1d.test.cpp',
            'setups/rareRare1d/RareRare1d.test.cpp',
            'setups/custom1d/Custom1d.test.cpp',
            'setups/subcritical1d/Subcritical1d.test.cpp',
            'setups/supercritical1d/Supercritical1d.test.cpp',
            'setups/tsunamiEvent1d/TsunamiEvent1d.test.cpp',
            'setups/artificialTsunami2d/ArtificialTsunami2d.test.cpp',
            'setups/tsunamiEvent2d/TsunamiEvent2d.test.cpp',
            'setups/damBreak2d/DamBreak2d.test.cpp',
            'io/csv/Csv.test.cpp',
            'io/stations/Stations.test.cpp',
            'io/netCdf/NetCdf.test.cpp',]

for l_te in l_tests:
  env.tests.append( env.Object( l_te ) )

Export('env')